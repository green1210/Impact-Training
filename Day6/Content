2D-array

int[][] arr = new int[][]
 - first square bracket represent rows and second represent columns
 - while declearing we have to give no. of row is compulsory and columns is optional.

//print an 2D array take the input from user.


import java.util.*;

class Main{
       public static void main(String[] args){
           Scanner sc =new Scanner(System.in);
           int[][] arr = new int[3][2];
           System.out.println("Enter value:");
           
           for(int i=0;i<arr.length;i++){
               for(int j=0;j<arr[i].length;j++){
                   arr[i][j] = sc.nextInt();
                 }
               }
           for(int i=0;i<arr.length;i++){
               for(int j=0;j<arr[i].length;j++){
                System.out.println(arr[i][j]);
               }
                System.out.println();
             }
             for(int i=0;i<arr.length;i++){
               { 
                     System.out.println(Arrays.toString(arr[i]));
               }
           }
      }
}



* Zagged Array : Columns are dynamic.


import java.util.*;

class Main{
   public static void main(String[] args){
     Scanner sc =new Scanner(System.in);
           int[][] arr =   {  
                               { 1,2,3,},
                               {4,5},
                               {6,7,8,9}
                           };
      
    for(int i=0;i<arr.length;i++){
        System.out.println(Arrays,toString(arr[i]));
     }
  }
}

 //sum of zig-zag elements -->1,2,3,5,7,8,9,-->35
 {  
      { 1,2,3},
      {4,5,6},
      {7,8,9}
 }

import java.util.*;

class Main{
       public static void main(String[] args){
           Scanner sc =new Scanner(System.in);
           int[][] arr =  {  
                            { 1,2,3},
                            {4,5,6},
                            {7,8,9}
                          } ;
           int sum = 0;
           
           for(int i=0;i<arr.length;i++){
               for(int j=0;j<arr[i].length;j++){
                   arr[i][j] = sc.nextInt();
                 }
               }
           for(int i=0;i<arr.length;i++){
               for(int j=0;j<arr[i].length;j++){
                System.out.println(arr[i][j]);
               }
                System.out.println();
             }
             for(int i=0;i<arr.length;i++){
               { 
                     System.out.println(Arrays.toString(arr[i]));
               }
           }
      }
}

// find the missing number in an sorted array 
   [1 ,2 ,3 ,5 ,6 ,7 ,8 ,9] --> 4

import java.util.*;

class Main{
     public static void main(String[] args){
      int[] arr = {1 ,2 ,3 ,5 ,6 ,7 ,8 ,9};
         for(int i=0;i<arr.length-1;i++){
             if(arr[i] + 1!=arr[i+1]){
               int missing = arr[i]+1;
               System.out.println(missing);
              }
           }
        }
     }          




//Maximum Consecutive Ones
 [1,0,1,0,1,1,1,0,1,1] --> 3

import java.util.*;

class Main{
     public static void main(String[] args){
      int[] arr = { 1,0,1,0,1,1,1,0,1,1};
      int max = 0;
      int count = 0;
         for(int i=0;i<arr.length-1;i++){
             if(arr[i] == 1){
                count++;
            }else {
                count = 0;
            }
             max = Math.max(count,max);
        }
            System.out.println(max);
    }
}
                  

* Math.max is an in build function. 

// rotate an array in 90 degrees

   Normal      Transpose   90 degree
   matrix       matrix      matrix

   1 2 3        1 4 7       7 4 1
   4 5 6   -->  2 5 8  -->  8 5 2
   7 8 9        3 6 9       9 6 3

import java.util.*;

class Main{
     public static void main(String[] args){
       Scanner sc = new Scanner(System.in);
          int[][] arr = new int[3][3]; 
         for(int i=0;i<arr.length;i++){
              for(int j=0 ;j<arr.length;j++){
                   arr[i][j] = sc.nextInt();
                  }
              }
          for(int i=0;i<arr.length;i++){
              for(int j=0 ;j<arr.length;j++){
                   System.out.println(arr[i][j]);
             }
       }

// leaders in an array problem.
   [11,3,5,9,4,6] --> [11,9,6]

import java.util.*;

class Main{
     public static void main(String[] args){
       
          int[] arr = {11,3,5,9,4,6}; 
         for(int i=0;i<arr.length;i++){
              if(arr[i]>arr[i+1]){
                 int leader = arr[i]
                  System.out.println(leader);
                }
             }
         } 
   }


public static List<interger> findLeaders(int[] arr){
         List<interger> leaders = new ArrayList<>();
        int minExtreme =Interger.MIN_VALUE;
         for(int i =arr.length -1; i>=0;i--){
              if( arr[i] > minExtreme){
                  leaders.add(arr[i]);
                    minExtreme = arr[i];
              }
           }
         collections.reverse(leaders);
           return leaders;
}

