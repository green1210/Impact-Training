Data Structure & Algorithms:

* Data Structure : Arrangement of data in a structured format which can be customizable to easy and fast access with less time   
  complexity.
  
   - In array memory allocation is continuous, so access time will be more and code will be messy.
   - In Data Structure memory allocation is random, so access time will be less.

* Algorithms : Mathematicals solutions or method which is used to write the code simple and better way.

* Examples of Data Structure :  Stack, Queue, LinkedList, Tree, Graph, Heap.

* Examples of Algorithms : Dutch national flag, sliding window, Greedy.

Time Complexity:

* The amount of time required to compile a code.
* Key Points :
 - Ignore Constants.
 - Ignore Small Values.
 - Focus on worst case.

* Example :
             1.for(0 - n)
                 for(0 - n)
             2.for(0 - n)
             3.O(1)

 - the time complexity will be : n^2 + n + 1 = n^2
 - because we always consider the worst case senariores.

Space Complexity:

* The amount space required for the code.
* Extra space we use in code increases the space complexity.
* Use case of data structure : Browser(linkedlist), Google maps(Graph), Social Media(Graph).

Types of Data structure:
- Linear       : Linkedlist, stack, queue.
- Non - Linear : Trees, Graphs, Heaps.


LinkedList :

- There is no data type which can store data and address, we have create a user define data type which can store data and as well as address.
- Used for faster insertion and delection.
- There 3 types:
   1.Single
   2.Double
   3.Circular
     i. Single circular
     ii.Double circular

- Ex : class node {
                int data;
                 Node next;
                }

- There are 2 types of Possiblities:
  1.Single Node, Last Node
    - It contains data and null
    - Ex: Node(int data){
              this.data=data;
              this.next=null;
             }

  2.Middle Node
   - we have to create an constructor which accept data as well as address
   - Ex : 
           Node(int data, Node next){
                this.data = data;
                this.next = next;
               }

  Ex: Convert array into linkedlist

   class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }

    Node(int data, Node next) {
        this.data = data;
        this.next = next;
    }
}

class Main {
    static Node arrayToLinkedlist(int[] arr) {
        Node head = new Node(arr[0]);
        Node current = head;
        
        for (int i = 1; i < arr.length; i++) {
            Node temp = new Node(arr[i]);
            current.next = temp;
            current = temp;
        }
        return head;
    }

    static void print(Node head) {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + (temp.next != null ? "->" : "->Null"));
            temp = temp.next;
        }
    }

    public static void main(String[] args) {
        int[] arr = {1, 2, 3, 4, 5};
        Node head = arrayToLinkedlist(arr);
        print(head); 
    }
}
