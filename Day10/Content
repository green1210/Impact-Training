Day 10:
strings:

- strings are class, array are objects.
- sequence of characters are strings.
- once strings are created, it can't modify the strings.
- all the strings are created in string pool.
- Method in strings:
  1. length() - return the length of the string.
  2. charAt(int index) - 
  3. substring(int startindex , int endindex) -
  4. contains(charSequence s) -
  5. startsWith(String prefix) -
  6. toUpperCase() -
  7. toLowerCase() - 
  8.trim() - removes leading and tailing spaces.
  9.replace(String old, String new) 
  10.split(String regex) - Splits the string into an array
  11.equals(String anotherString) / equalsIgnoreCase(String anotherString) - comparing two strings




class Main{
public static void main(String[] args){
   String a = "Hello";
   String b = "Hello";
   System.out.println(a==b);
}
}

output : true;
because it has same address(== operator check the address)

class Main{
public static void main(String[] args){
   String a = new String("Hello");
   String b = new String("Hello");
   System.out.println(a==b);
}
}
output : false;
because it is stored in different address in string pool.

class Main{
public static void main(String[] args){
   String a = new String("Hello");
   String b = new String("Hello");
   System.out.println(a.equal(b));
}
}
output : True;
- because equals check the values.


// Subset

- ex:
  [1,2,3] = [],[1],[2],[3],[1,2],[2,3],[1,3],[1,2,3]
 
  * Steps

   - taking the value.
   - Not taking the value.
   - when we reached the bse, print all base elements.
   - basecase, when array length is equals to original array length.
   - every recursive call remove the last element then it will backtrack.
                           
 - EX:
                                            []
            
                     [1]                                           [ _ ]
    
        [1,2]                  [1,_]                    [_,2]                [ _, _]

 [1,2,3]    [1,2,_]   [1,_,3]     [1,_,_]          [_,2,3]   [_,2,_]     [_,_,3]      [_,_,_]


- for a given array, we will get 2^n subset.
- subset should be in asequence, but not in continues.

// Dutch National Flag Algorithm:

Ex: int[] arr = {1, 0, 2, 1, 2, 0, 2, 1, 0, 1}

- l,m at zero th index, h is at n-1
- the elements b/w m and h are not sorted, we have to run a loop from m to h
- if both cross, it means we reached all elements.
- if arr[m] is 0, swap arr[m] and arr[l]. After swapping increase m and l.
- if arr[m] is 1, just move m pointer.
- if arr[m] is 2, swap arr[m] and arr[h], After swapping decrease h.



class Main{
    
        for(int i=0;i<arr.length;i++){
            for(int j=0;j<arr.length;j++){
                for(int k=arr.length-1; k<=0;k--){
                    if(arr[j]==0){
                        swap(i,j);
                        i++;
                        j++;
                    }else if(arr[j]==1){
                        j++;
                    }else{
                        swap(j,k);
                        k--;
                    }
                }
            }
        }
        public static void main(String[] args){
        int[] arr = {1, 0, 2, 1, 2, 0, 2, 1, 0, 1};
        for(int nu)
    }
}

leetcode 7
 
import java.util.*;

class Main {
    public static void green(int[] arr) {
        int l = 0;
        int m = 0;
        int h = arr.length - 1;

        while (m <= h) {
            if (arr[m] == 0) {
                swap(arr, l, m);
                l++;
                m++;
            } else if (arr[m] == 1) {
                m++;
            } else {          
                swap(arr, m, h);
                h--;
            }
        }
    }

    private static void swap(int[] arr, int i, int j) {
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    public static void main(String[] args) {
        int[] arr = {1, 0, 2, 1, 2, 0, 2, 1, 0, 1};

        green(arr);

        System.out.println("Sorted array:");
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}


