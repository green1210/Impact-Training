
class Main{
    
    // checking loop is existed or Not
    
    static Node detectingLoop(Node head){
        Node fast= head;
        Node slow= head;
        
        while(fast!=null && fast.next!=null){
            fast = fast.next;
            slow = slow.next;
            if(fast==slow){
                return countingLoopNodes(head, fast, slow) 
            }
            return head;
        }
        
    }
    
    // Deleting the loop
    
    static Node delectingCycle(Node head, Node fast, Node slow){
        slow = head.next;
        while(fast.next!=slow){
            fast = fast.next;
            slow = slow.next;
        }
        
        fast.next=null;
        return head;
    }
    
    // counting how many nodes are there in the loop
    static int countingLoopNodes(Node head, Node fast, Node slow){
        int count=1;
        fast=fast.next;
        while(fast!=slow){
            count++
        }
        return count;
    }
    
    //Find the starting node of the loop
    static Node startingNodeLoop(Node head, Node fast, Node slow){
        slow =head;
        while(slow!=fast){
        fast=fast.next;
        slow=slow.next;
    }  return slow;
    }
    
    // Deleting the Node from the End
    
    static Node deleteNthNodeFromEnd(Node head, int n){
        Node fast = head;
        Node slow = head;
        
        
        for(int i=0;i<n;i++){
            fast=fast.next;
        }
        while(fast.next!=null){
            fast=fast.next;
            slow=slow.next;
        }
        Node delete =slow.next;
        slow.next = delete.next;
        delete.next=null;
        return head;
        }
        
    public static void main(String[] agrs)
    }
}



// Separate odd and even:

static Node oddAnEven(Node head){
        Node temp = head;
        Node oddStart,oddEnd,evenStart,evenEnd=null;
        while(temp!=null){
            if(temp.data%2==0){
                if(evenStart == null){
                    evenStart = temp;
                    evenEnd = evenStart;
                }else{
                    evenEnd.next = temp;
                    evenEnd = temp;
                }
            }else{
                if(oddStart == null){
                    oddStart = temp;
                    oddEnd = oddStart;
                }else{
                    oddEnd.next = temp;
                    oddEnd = temp;
                }
            }
        }
        
        if(oddStart==null){
            return evenStart;
        }
        if(evenStart==null){
            return oddStart;
        }
        
        oddEnd.next = evenStart;
        evenEnd.next = null;
        
        return oddStart;
    }
