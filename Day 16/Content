// Day16:

// Leetcode: 875
// KoKo Eating Bananas.

[abcabc] = [a][b][c][a][b][c][ab][bc][ca][ab][bc][abc][bca][cab][abc][abca] [bcab][cabc][abcab][bcabc][abcabc]
            

// Maximum product of sub arrays

arr = [5,3,2,-10,5,7,8,0,-1,2]

//observation:

- in a given sub array, if we have even negative values then product is positive.
- in a given sub array, if we have odd negative values then product is negative.
- if we got zero , then product is zero. so initialize the product with 1.
- initilize 2 variable, prefix and suffix.
- calculate prefix product and suffix product and get max(prefix, suffix)

Ex:nums = {2,3,-2,2}

class Main{
    public static int maxiProduct(int[] nums){
        int prefix =1;
        int suffix =1;
        int n = nums.length;
        int product = Integer.MIN_VALUE;
        
        for(int i=0;i<n;i++){
            if(prefix==0) prefix=1;
            if(suffix==0) suffix=1;
            
            prefix *= nums[i];
            suffix *= nums[n-i-1];
            product =Math.max(product, Math.max(prefix, suffix));
    }
        return product;
}

    public static void main(String[] args){
        int[] nums = {2,3,-2,2};
        int result = maxiProduct(nums);
        System.out.print(result);
    }
}

//Leetcode 162 : peek element index 

class Main {
    public static int findPeak(int[] nums) {
        int left = 0, right = nums.length - 1;

        while (left < right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] > nums[mid + 1]) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }

        return left;
    }

    public static void main(String[] args) {
        int[] nums = {1, 2, 3, 1};
        int peakIndex = findPeak(nums);
        System.out.println("Peak element index: " + peakIndex);
        System.out.println("Peak element value: " + nums[peakIndex]);
    }
}
