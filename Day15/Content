Day 15:

// Leetcode : 1752

class Main{
    public static int Sorted(int[] nums){
        int left = 0;
        int right = nums.length-1;
        int mid = left+(right-left)/2;
        
        while(left<right){
          if(nums[mid]<right){
               return right=mid;
          } if(nums[mid]>right){
                return left = mid+1;
          }
        }
        return -1;
    }
    
    public static void main(String[] args){
    int[] nums = {9,11,12,2,5,7};
   
    int result = Sorted(nums);
    System.out.println(result);
}
}

// Leetcode:

//RangeSum:
class Main {
    public static int[] rangeSum(int[] nums) {
        int[] prefix = new int[nums.length];
        prefix[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        return prefix;
    }

    public static int getPrefix(int[] prefix, int i, int j) {
        if (i == 0) return prefix[j];
        return prefix[j] - prefix[i - 1];
    }

    public static void main(String[] args) {
        int[] nums = {2, 3, 5, 7, 9};
        int[] prefix = rangeSum(nums);

        int i = 1, j = 3;
        int sum = getPrefix(prefix, i, j);

        System.out.println("Range sum from index " + i + " to " + j + ": " + sum);
    }
}


//Sub Arrays: leetcode:
  
[1,0,1,0,1]

 [1] [0] [1] [0] [1] [1,0] [0,1] [1,0] [0,1] [1,1] [1, 0, 1] [1,0,1] [1,0,1,0] [0,1,0,1][1,0,1,0,1]

while(r<n){
sum = sum+arr[r];
if(sum<=goal){
   l++;
  }
if(sum>goal){
sum=sum-arr[r];
 l++;
}
r++;
}


//leetcode: 1248

[1,1,2,1,1]

[1] [1] [2] [1] [1] [1,1] [1,2] [2,1] [1,1] [1,1] [1,1,2] [2,1,1] [1,1,2,1] [1,2,1,1] [1,1,2,1,1]
-Ex:
import java.util.*;

class Main {
    public static void main(String args[]) {
        int arr[] = {0, 0, 0, 0, 0}; 
        int goal = 0; 
        int res = find(arr, goal); 
        System.out.println(res);
    }

    static int find(int[] arr, int goal) {
        int l = 0, r = 0, sum1 = 0, count1 = 0, count2 = 0;

        while (r < arr.length) {
            sum1 += arr[r];
            while (sum1 > goal && l <= r) {  
                sum1 -= arr[l]; 
                l++;
            }
            count1 += (r - l + 1); 
            r++;
        }
        l = 0; r = 0; sum1 = 0;
        
        while (r < arr.length) {  
            sum1 += arr[r];
            while (sum1 > goal - 1 && l <= r) {  
                sum1 -= arr[l]; 
                l++;
            }
            count2 += (r - l + 1); 
            r++;
        }
        return count1 - count2;
    }
}



